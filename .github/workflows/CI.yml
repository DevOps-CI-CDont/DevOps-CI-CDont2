name: Continuous Integration

on:
  push:
    paths-ignore:
      - 'report/**'
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - 'report/**'

jobs:
  build_and_push_api_test_image:
    runs-on: ubuntu-latest
    steps:
       - uses: actions/checkout@v3
       - name: Build the Docker image for api test
         run: | 
          export DB_HOST=${{ secrets.DB_HOST }}
          export DB_PORT=${{ secrets.DB_PORT }}
          export DB_NAME=${{ secrets.DB_NAME }}
          export DB_USERNAME=${{ secrets.DB_USER }}
          export DB_PASSWORD=${{ secrets.DB_PASS }}
          docker build -f ./itu-minitwit/backend/Dockerfile-test --build-arg DB_HOST --build-arg DB_PORT --build-arg DB_NAME --build-arg DB_USERNAME --build-arg DB_PASSWORD -t api-test:latest ./itu-minitwit/backend
     
       - name: Install doctl
         uses: digitalocean/action-doctl@v2
         with:
          token: ${{ secrets.DIGITAL_OCEAN_REGISTRY }}

       - name: doctl registry login
         run: doctl registry login

       - name: Tag and push backend Docker image to DigitalOcean Container Registry
         run: |
          docker tag api-test:latest registry.digitalocean.com/cicdont-images/api-test:latest
          docker push registry.digitalocean.com/cicdont-images/api-test:latest
  api_tests_on_image:
    runs-on: ubuntu-latest
    needs: build_and_push_api_test_image
    env:
      REGISTRY: registry.digitalocean.com
      IMAGE_NAME: cicdont-images/api-test
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.20.x

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITAL_OCEAN_REGISTRY }}
          
      - name: doctl registry login
        run: doctl registry login

      - name: Pull image
        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Run tests
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_TEST_NAME: ${{ secrets.DB_TEST_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
        run: |
          docker run -e DB_HOST=$DB_HOST -e DB_PORT=$DB_PORT -e DB_TEST_NAME=$DB_TEST_NAME -e DB_USER=$DB_USER -e DB_PASS=$DB_PASS --detach -p 8080:8080 -p 8081:8081 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          (cd itu-minitwit/backend/test && go test -v ./...)
  static-analysis:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install dependencies
    
      run: |
        cd itu-minitwit/frontend
        npm ci

    - name: Run tsc
      run: |
        cd itu-minitwit/frontend
        npm run tsc
    
    - name: run eslint
      run: |
        cd itu-minitwit/frontend
        npm run lint:strict

    - name: run go vet
      run: |
        cd itu-minitwit/backend
        go vet ./...
